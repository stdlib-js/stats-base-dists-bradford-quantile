{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar expm1 = require( '@stdlib/math-base-special-expm1' );\nvar log1p = require( '@stdlib/math-base-special-log1p' );\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a Bradford distribution with shape parameter `c` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {PositiveNumber} c - shape parameter\n* @returns {NonNegativeNumber} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.1, 0.1 );\n* // returns ~0.096\n*\n* @example\n* var y = quantile( 0.5, 5.0 );\n* // returns ~0.290\n*\n* @example\n* var y = quantile( 1.0, 10.0 );\n* // returns 1.0\n*\n* @example\n* var y = quantile( 0.5, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 1.0, NaN );\n* // returns NaN\n*/\nfunction quantile( p, c ) {\n\tif (\n\t\tisnan( c ) ||\n\t\tisnan( p ) ||\n\t\tc <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn expm1( p * log1p( c ) ) / c;\n}\n\n\n// EXPORTS //\n\nmodule.exports = quantile;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar expm1 = require( '@stdlib/math-base-special-expm1' );\nvar log1p = require( '@stdlib/math-base-special-log1p' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a Bradford distribution with shape parameter `c`.\n*\n* @param {PositiveNumber} c - shape parameter\n* @returns {NonNegativeNumber} quantile function\n*\n* @example\n* var quantile = factory( 5.0 );\n* var y = quantile( 0.4 );\n* // returns ~0.210\n*\n* y = quantile( 0.8 );\n* // returns ~0.639\n*\n* y = quantile( 1.0 );\n* // returns 1.0\n*/\nfunction factory( c ) {\n\tif (\n\t\tisnan( c ) ||\n\t\tc <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a Bradford distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif (\n\t\t\tisnan( p ) ||\n\t\t\tp < 0.0 ||\n\t\t\tp > 1.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn expm1( p * log1p( c ) ) / c;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Bradford distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-bradford-quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats-base-dists-bradford-quantile' );\n*\n* var y = quantile( 0.1, 0.1 );\n* // returns ~0.096\n*\n* var y = quantile( 0.5, 5.0 );\n* // returns ~0.290\n*\n* var myquantile = quantile.factory( 5.0 );\n* y = myquantile( 0.4 );\n* // returns ~0.210\n*\n* y = myquantile( 0.8 );\n* // returns ~0.639\n*\n* y = myquantile( 1.0 );\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAQ,QAAS,iCAAkC,EA4CvD,SAASC,EAAUC,EAAGC,EAAI,CACzB,OACCL,EAAOK,CAAE,GACTL,EAAOI,CAAE,GACTC,GAAK,GACLD,EAAI,GACJA,EAAI,EAEG,IAEDH,EAAOG,EAAIF,EAAOG,CAAE,CAAE,EAAIA,CAClC,CAKAN,EAAO,QAAUI,ICpFjB,IAAAG,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,iCAAkC,EAC9DC,EAAQ,QAAS,iCAAkC,EACnDC,EAAQ,QAAS,iCAAkC,EACnDC,EAAQ,QAAS,iCAAkC,EAsBvD,SAASC,EAASC,EAAI,CACrB,GACCJ,EAAOI,CAAE,GACTA,GAAK,EAEL,OAAOL,EAAkB,GAAI,EAE9B,OAAOM,EAaP,SAASA,EAAUC,EAAI,CACtB,OACCN,EAAOM,CAAE,GACTA,EAAI,GACJA,EAAI,EAEG,IAEDL,EAAOK,EAAIJ,EAAOE,CAAE,CAAE,EAAIA,CAClC,CACD,CAKAN,EAAO,QAAUK,ICnCjB,IAAII,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtC,OAAO,QAAUD",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isnan", "expm1", "log1p", "quantile", "p", "c", "require_factory", "__commonJSMin", "exports", "module", "constantFunction", "isnan", "expm1", "log1p", "factory", "c", "quantile", "p", "setReadOnly", "main", "factory"]
}
